/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package JFrames;

import clases.RellenarComboBox;
import javax.swing.JOptionPane;
import java.sql.*;
import clases.conectar;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;


public class Horario extends javax.swing.JFrame {

    RellenarComboBox re = new RellenarComboBox();
    int idAlum, idDoc;
    
    public Horario() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Registro de Docente - Scherzzo");
        ImageIcon icono = new ImageIcon("C:\\Users\\Fer\\OneDrive\\Documentos\\NetBeansProjects\\Scherzzo"
                + "\\src\\imagenes\\Scherzzo.jpg"); 
        this.setIconImage(icono.getImage());
        
        
        re.RellenarCombos("clase", "nombre_clase", jComboBoxClase);
        re.ConcatenarCombos("alumno", "nombre", "apellido1", "apellido2", jComboBoxAlum);
        re.ConcatenarCombos("docente", "nombre", "apellido1", "apellido2", jComboBoxMtro);
        
        Calendar calendar = Calendar.getInstance();
        java.util.Date fechaActual = calendar.getTime();
        // Establece la fecha actual como valor predeterminado en el jDateChooser
        jDateChooserActual.setDate(fechaActual);
        
        consultaFila();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fondo = new javax.swing.JPanel();
        semana = new javax.swing.JLabel();
        LogoScherzzo = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBoxMtro = new javax.swing.JComboBox<>();
        jComboBoxClase = new javax.swing.JComboBox<>();
        jComboBoxAlum = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        btnEliminar = new javax.swing.JButton();
        btnAñadir = new javax.swing.JButton();
        ID = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jComboBoxHora = new javax.swing.JComboBox<>();
        ID1 = new javax.swing.JLabel();
        ID3 = new javax.swing.JLabel();
        ID4 = new javax.swing.JLabel();
        ID5 = new javax.swing.JLabel();
        jDateChooserActual = new com.toedter.calendar.JDateChooser();
        btnModificar = new javax.swing.JButton();
        ID2 = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Fondo.setBackground(new java.awt.Color(172, 204, 244));
        Fondo.setMinimumSize(new java.awt.Dimension(1000, 600));
        Fondo.setPreferredSize(new java.awt.Dimension(1000, 600));
        Fondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        semana.setFont(new java.awt.Font("Yu Gothic UI", 0, 24)); // NOI18N
        semana.setText("Horario del día");
        Fondo.add(semana, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 82, 180, 50));

        LogoScherzzo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Scherzzo.jpg"))); // NOI18N
        Fondo.add(LogoScherzzo, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 10, 120, 120));

        btnReturn.setBackground(new java.awt.Color(172, 204, 244));
        btnReturn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/flechita.png"))); // NOI18N
        btnReturn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnReturn.setBorderPainted(false);
        btnReturn.setContentAreaFilled(false);
        btnReturn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });
        Fondo.add(btnReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 50, 50));

        jScrollPane1.setBackground(new java.awt.Color(172, 204, 244));

        jTable1.setBackground(new java.awt.Color(229, 238, 251));
        jTable1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hora", "Clase", "Alumno", "Docente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(172, 204, 244));
        jTable1.setRowHeight(50);
        jTable1.setSelectionBackground(new java.awt.Color(172, 204, 244));
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(25);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        Fondo.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 640, 280));

        jComboBoxMtro.setBackground(new java.awt.Color(204, 227, 255));
        jComboBoxMtro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jComboBoxMtro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        jComboBoxMtro.setToolTipText("");
        jComboBoxMtro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jComboBoxMtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMtroActionPerformed(evt);
            }
        });
        Fondo.add(jComboBoxMtro, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 330, 220, -1));

        jComboBoxClase.setBackground(new java.awt.Color(204, 227, 255));
        jComboBoxClase.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jComboBoxClase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        jComboBoxClase.setToolTipText("");
        jComboBoxClase.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jComboBoxClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxClaseActionPerformed(evt);
            }
        });
        Fondo.add(jComboBoxClase, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 180, 150, -1));

        jComboBoxAlum.setBackground(new java.awt.Color(204, 227, 255));
        jComboBoxAlum.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jComboBoxAlum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        jComboBoxAlum.setToolTipText("");
        jComboBoxAlum.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jComboBoxAlum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAlumActionPerformed(evt);
            }
        });
        Fondo.add(jComboBoxAlum, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 380, 220, -1));

        jDateChooser1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Fondo.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 280, 150, 30));

        btnEliminar.setBackground(new java.awt.Color(236, 108, 108));
        btnEliminar.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorderPainted(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        Fondo.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 440, -1, -1));

        btnAñadir.setBackground(new java.awt.Color(248, 198, 44));
        btnAñadir.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnAñadir.setBorderPainted(false);
        btnAñadir.setLabel("Añadir");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });
        Fondo.add(btnAñadir, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 440, -1, -1));

        ID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ID.setText("ID:");
        Fondo.add(ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 130, 60, 30));

        btnBuscar.setBackground(new java.awt.Color(172, 204, 244));
        btnBuscar.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/busqueda22.png"))); // NOI18N
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        Fondo.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 60, -1));

        jComboBoxHora.setBackground(new java.awt.Color(204, 227, 255));
        jComboBoxHora.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jComboBoxHora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00" }));
        jComboBoxHora.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Fondo.add(jComboBoxHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 230, 150, -1));

        ID1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ID1.setText("Alumno:");
        Fondo.add(ID1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 380, 80, 30));

        ID3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ID3.setText("Hora:");
        Fondo.add(ID3, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 230, 60, 30));

        ID4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ID4.setText("Fecha:");
        Fondo.add(ID4, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 280, 60, 30));

        ID5.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ID5.setText("Docente:");
        Fondo.add(ID5, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 330, 80, 30));

        jDateChooserActual.setFont(new java.awt.Font("Yu Gothic UI", 0, 24)); // NOI18N
        Fondo.add(jDateChooserActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, 200, 40));

        btnModificar.setBackground(new java.awt.Color(172, 204, 244));
        btnModificar.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setBorderPainted(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        Fondo.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 440, -1, -1));

        ID2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ID2.setText("Clase:");
        Fondo.add(ID2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 180, 60, 30));

        jTextFieldID.setEditable(false);
        jTextFieldID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jTextFieldID.setDisabledTextColor(new java.awt.Color(76, 76, 76));
        jTextFieldID.setEnabled(false);
        Fondo.add(jTextFieldID, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 130, 80, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fondo, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fondo, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxMtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMtroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxMtroActionPerformed

    private void jComboBoxClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxClaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxClaseActionPerformed

    private void jComboBoxAlumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAlumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxAlumActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try{
            //Obtener idClase
            String  clase = (String) jComboBoxClase.getSelectedItem();
            int idClase = obtenerIdClase(clase, "clase");
            
            //Obtener Hora
            String hora = (String) jComboBoxHora.getSelectedItem();
            
            //Obtener nombres y apellidos de los alumnos
            String  alumnoCom = (String) jComboBoxAlum.getSelectedItem();
            idAlum = obtenerNombreAlumno(alumnoCom); //Obtener el id del alumno a través de su nombre completo
            
            //Obtener nombres y apellidos de los docentes
            String  docenteCom = (String) jComboBoxMtro.getSelectedItem();
            idDoc = obtenerNombreDocente(docenteCom); //Obtener el id del docente a través de su nombre completo
            
            //Obtener la fecha seleccionada del jDateChooser
            java.util.Date fechaSeleccionada = jDateChooser1.getDate();
            //Convertir la fecha a java.sql.Date
            java.sql.Date fecha = new java.sql.Date(fechaSeleccionada.getTime());
            
            eliminarHorario(idAlum, idClase, hora, fecha, idDoc);
            insertarDatosTabla();
            limpiar();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        try{
            //Obtener idClase
            String  clase = (String) jComboBoxClase.getSelectedItem();
            int idClase = obtenerIdClase(clase, "clase");
            
            //Obtener Hora
            String hora = (String) jComboBoxHora.getSelectedItem();
            
            //Obtener nombres y apellidos de los alumnos
            String  alumnoCom = (String) jComboBoxAlum.getSelectedItem();
            idAlum = obtenerNombreAlumno(alumnoCom);
            
            //Obtener nombres y apellidos de los docentes
            String  docenteCom = (String) jComboBoxMtro.getSelectedItem();
            idDoc = obtenerNombreDocente(docenteCom);
            
            //Obtener la fecha seleccionada del jDateChooser
            java.util.Date fechaSeleccionada = jDateChooser1.getDate();
            java.sql.Date fecha = new java.sql.Date(fechaSeleccionada.getTime());
            
            //Guardar los datos en la tabla horario
            guardarHorario(idAlum, idClase, hora, fecha, idDoc);
            insertarDatosTabla();
            limpiar();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        insertarDatosTabla();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try {
            //Obtener clase
            String  clase = (String) jComboBoxClase.getSelectedItem();
            int idClase = obtenerIdClase(clase, "clase");
            
            //Obtener Hora
            String hora = (String) jComboBoxHora.getSelectedItem();
            
            //Obtener nombres y apellidos de los alumnos
            String  alumnoCom = (String) jComboBoxAlum.getSelectedItem();
            idAlum = obtenerNombreAlumno(alumnoCom);
            
            //Obtener nombres y apellidos de los docentes
            String  docenteCom = (String) jComboBoxMtro.getSelectedItem();
            idDoc = obtenerNombreDocente(docenteCom);
            
            //Obtener la fecha seleccionada del jDateChooser
            java.util.Date fechaSeleccionada = jDateChooser1.getDate();
            java.sql.Date fecha = new java.sql.Date(fechaSeleccionada.getTime());
            
            // Obtener el valor del JTextFieldID
            String valor = jTextFieldID.getText();
            // Convertir el valor a un número entero
            int idHorario = Integer.parseInt(valor);
            
            modificarHorario(idAlum, idClase, hora, fecha, idDoc, idHorario);
            insertarDatosTabla();
            limpiar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        this.dispose(); //cerrar ventana actual
        PagPrincipal principal = new PagPrincipal();
        principal.setVisible(true);
    }//GEN-LAST:event_btnReturnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Horario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Fondo;
    private javax.swing.JLabel ID;
    private javax.swing.JLabel ID1;
    private javax.swing.JLabel ID2;
    private javax.swing.JLabel ID3;
    private javax.swing.JLabel ID4;
    private javax.swing.JLabel ID5;
    private javax.swing.JLabel LogoScherzzo;
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnReturn;
    private javax.swing.JComboBox<String> jComboBoxAlum;
    private javax.swing.JComboBox<String> jComboBoxClase;
    private javax.swing.JComboBox<String> jComboBoxHora;
    private javax.swing.JComboBox<String> jComboBoxMtro;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooserActual;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JLabel semana;
    // End of variables declaration//GEN-END:variables
    
    public int obtenerIdHorario(int idAlumno, int idClase, String hora, Date dia, int idDocente) throws SQLException {
        int id = 0;
        String sql = "SELECT idHorario FROM horario WHERE Alumno_idAlumno = ? AND Clase_idClase = ? AND hora = ? AND dia = ? AND Docente_idDocente = ?";
        try (Connection conexion = obtenerConexion();
             PreparedStatement stmt = conexion.prepareStatement(sql)) {
            stmt.setInt(1, idAlumno);
            stmt.setInt(2, idClase);
            stmt.setString(3, hora);
            stmt.setDate(4, dia);
            stmt.setInt(5, idDocente);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    id = rs.getInt("idHorario");
                }
            }
        }
        return id;
    }

// Método para obtener el ID de una tabla por su nombre
public int obtenerIdAlumno(String nombre, String apellido1, String apellido2, String tabla) throws SQLException {
    int id = 0;
    String sql = "SELECT idAlumno FROM " + tabla + " WHERE nombre = ? AND apellido1 = ? AND apellido2 = ?";
    try (Connection conexion = obtenerConexion();
         PreparedStatement stmt = conexion.prepareStatement(sql)) {
        stmt.setString(1, nombre);
        stmt.setString(2, apellido1);
        stmt.setString(3, apellido2);
        try (ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                id = rs.getInt("idAlumno");
            }
        }
    }
    return id;
}

public int obtenerIdDocente(String nombre, String apellido1, String apellido2, String tabla) throws SQLException {
    int id = 0;
    String sql = "SELECT idDocente FROM " + tabla + " WHERE nombre = ? AND apellido1 = ? AND apellido2 = ?";
    try (Connection conexion = obtenerConexion();
         PreparedStatement stmt = conexion.prepareStatement(sql)) {
        stmt.setString(1, nombre);
        stmt.setString(2, apellido1);
        stmt.setString(3, apellido2);
        try (ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                id = rs.getInt("idDocente");
            }
        }
    }
    return id;
}

public int obtenerIdClase(String nombre, String tabla) throws SQLException {
    int id = 0;
    String sql = "SELECT idClase FROM " + tabla + " WHERE nombre_clase = ?";
    try (Connection conexion = obtenerConexion();
         PreparedStatement stmt = conexion.prepareStatement(sql)) {
            stmt.setString(1, nombre);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    id = rs.getInt("idClase");
                }
            }
    }
    return id;
}

public void guardarHorario(int idAlumno, int idClase, String hora, Date dia, int idDocente) throws SQLException {
    String sql = "INSERT INTO horario (Alumno_idAlumno, Clase_idClase, hora, dia, Docente_idDocente) VALUES (?, ?, ?, ?, ?)";
    try (Connection conexion = obtenerConexion();
         PreparedStatement stmt = conexion.prepareStatement(sql)) {
        //stmt.setInt(1, idHorario);
        stmt.setInt(1, idAlumno);
        stmt.setInt(2, idClase);
        stmt.setString(3, hora);
        stmt.setDate(4, dia);
        stmt.setInt(5, idDocente);
        stmt.executeUpdate();
    }
}

public void eliminarHorario(int idAlumno, int idClase, String hora, Date dia, int idDocente) throws SQLException{
    String sql = "DELETE FROM horario WHERE Alumno_idAlumno = ? AND Clase_idClase = ? AND hora = ? AND dia = ? AND Docente_idDocente = ?";
        try (Connection conexion = obtenerConexion();
             PreparedStatement stmt = conexion.prepareStatement(sql)) {
            stmt.setInt(1, idAlumno);
            stmt.setInt(2, idClase);
            stmt.setString(3, hora);
            stmt.setDate(4, dia);
            stmt.setInt(5, idDocente);
            stmt.executeUpdate();
        }
}
public void modificarHorario(int idAlumno, int idClase, String hora, Date dia, int idDocente, int idHorario) throws SQLException{
    String sql = "UPDATE horario SET Alumno_idAlumno = ?, Clase_idClase = ?, hora = ?, dia = ?, Docente_idDocente = ? WHERE (idHorario = "+idHorario+")";
        try (Connection conexion = obtenerConexion();
             PreparedStatement stmt = conexion.prepareStatement(sql)) {
            stmt.setInt(1, idAlumno);
            stmt.setInt(2, idClase);
            stmt.setString(3, hora);
            stmt.setDate(4, dia);
            stmt.setInt(5, idDocente);
            stmt.executeUpdate();
        }
}

public void insertarDatosTabla(){
    java.util.Date fechaSeleccionada = jDateChooserActual.getDate();
    java.sql.Date fecha = new java.sql.Date(fechaSeleccionada.getTime());
    
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Hora");
    model.addColumn("Clase");
    model.addColumn("Alumno");
    model.addColumn("Docente");

    String sql = "SELECT horario.hora, clase.nombre_clase, concat(alumno.nombre,' ', alumno.apellido1,' ', alumno.apellido2) alumno, " +
    "concat(docente.nombre,' ', docente.apellido1,' ', docente.apellido2) docente FROM horario, clase, alumno, docente " +
    "WHERE horario.Alumno_idAlumno=alumno.idAlumno AND horario.Clase_idClase=clase.idClase AND horario.Docente_idDocente=docente.idDocente AND horario.dia='" +fecha+"' "+
    "ORDER BY horario.hora";
    try (Connection conexion = obtenerConexion();
         Statement stmt = conexion.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {
        while (rs.next()) {
            String hora = rs.getString("hora");
            String clase = rs.getString("nombre_clase");
            String alumno = rs.getString("alumno");
            String docente = rs.getString("docente");
            model.addRow(new Object[]{hora, clase, alumno, docente});
        }
    jTable1.setModel(model);
    // Establecer el ancho de la primera columna a 10
    jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
    // Establecer el ancho de la segunda columna a 40
    jTable1.getColumnModel().getColumn(1).setPreferredWidth(40);
    // Establecer el ancho de la tercera columna a 160
    jTable1.getColumnModel().getColumn(2).setPreferredWidth(160);
    // Establecer el ancho de la cuarta columna a 150
    jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
}

public int obtenerNombreAlumno(String alumnoCom) throws SQLException {
    int idAlumno = 0;
    String[] nombreApellido = alumnoCom.split(" ");
    if (nombreApellido.length==4){
        String nombre = nombreApellido[0] + " " + nombreApellido[1];
        String apellido1 = nombreApellido[2];
        String apellido2 = nombreApellido[3];
        // Obtener el ID correspondiente al nombre y apellidos
        idAlumno = obtenerIdAlumno(nombre, apellido1, apellido2, "alumno");
    }else if (nombreApellido.length==3){
        String nombre = nombreApellido[0];
        String apellido1 = nombreApellido[1];
        String apellido2 = nombreApellido[2];
        // Obtener el ID correspondiente al nombre y apellidos
        idAlumno = obtenerIdAlumno(nombre, apellido1, apellido2, "alumno");
    }
    return idAlumno;
}

public int obtenerNombreDocente(String docenteCom) throws SQLException {
    int idDocen = 0;
    String[] nombreCom = docenteCom.split(" ");
        if (nombreCom.length==4){
            String nombreD = nombreCom[0]+ " " + nombreCom[1];
            String apellido1D = nombreCom[2];
            String apellido2D = nombreCom[3];
            // Obtener el ID correspondiente al nombre y apellidos
            idDocen = obtenerIdDocente(nombreD, apellido1D, apellido2D, "docente");
        }else if (nombreCom.length==3){
            String nombreD = nombreCom[0];
            String apellido1D = nombreCom[1];
            String apellido2D = nombreCom[2];
            // Obtener el ID correspondiente al nombre y apellidos
            idDocen = obtenerIdDocente(nombreD, apellido1D, apellido2D, "docente");
        }
    return idDocen;
}

public void consultaFila(){
    jTable1.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
        // Seleccionar la fila solo cuando se haya completado la selección
        if (!event.getValueIsAdjusting()) {
            // Obtener el modelo de la tabla
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            // Obtener la fila seleccionada
            int selectedRow = jTable1.getSelectedRow();
            // Obtener los valores de la fila seleccionada
            if (selectedRow != -1) {
                try {
                    String hora = model.getValueAt(selectedRow, 0).toString();
                    String alumno = model.getValueAt(selectedRow, 2).toString();
                    String clase = model.getValueAt(selectedRow, 1).toString();
                    String docente = model.getValueAt(selectedRow, 3).toString();
                    // Actualizar los valores de los componentes con los datos obtenidos
                    jComboBoxHora.setSelectedItem(hora);
                    jComboBoxAlum.setSelectedItem(alumno);
                    jComboBoxClase.setSelectedItem(clase);
                    jComboBoxMtro.setSelectedItem(docente);
                    // Obtener la fecha del jDateChooserActual
                    java.util.Date fecha = jDateChooserActual.getDate();
                    // Asignar la fecha al jDateChooser1
                    jDateChooser1.setDate(fecha);
                    
                    int idAlumno = obtenerNombreAlumno(alumno);
                    int idDocente = obtenerNombreDocente(docente);
                    int idClase = obtenerIdClase(clase, "clase");
                    java.sql.Date dia = new java.sql.Date(fecha.getTime());
                    int idHorario = obtenerIdHorario(idAlumno, idClase, hora, dia, idDocente);
                    jTextFieldID.setText(String.valueOf(idHorario));
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            }
        }
    });
}
    private Connection obtenerConexion() {
        conectar con = new conectar();
        Connection conexion = con.getConnection();
        return conexion;
    }
    //Metodo para limpiar 
    public void limpiar(){
        jTextFieldID.setText("");
        jComboBoxHora.setSelectedItem("Seleccione");
        jComboBoxAlum.setSelectedItem("Seleccione");
        jComboBoxClase.setSelectedItem("Seleccione");
        jComboBoxMtro.setSelectedItem("Seleccione");
        jDateChooser1.setDate(null);
    }
}
